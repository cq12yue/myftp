文件目录传输模块使用说明

(1) 文件目录传输模块的设计思想
该模块定义实现了CFtp类，该类继承于CTCPNet，因此是用TCP实现的文件目录传输。该模块机制特点如下：

1.1该类定义了传输任务结构TRANSMIT_TASK，其声明见附录A1。该结构的每个对象对应每次具体的文件或目录传输，每次任务传输使用一个线程实现，并且集中管理多个传输任务，当某个传输任务正在进行时，不允许相同的任务再次传输，因此避免了重复传输相同的任务。

1.2该类定义了传输信息结构TRANSMIT_INFO,其声明见附录A2。该结构对应于TRANSMIT_TASK
，表示传输任务对应的传输信息，该信息包括传送状态，目录或文件总长度，目录或文件已传输长度，当前文件总长度，当前文件已传输长度，传输速度，当前源文件，当前目标文件。定义了文件消息结构TRANS_FILE_MSG，其声明见附录A3。
该结构用于传输中断消息处理，用于确定是否替换目标已存在的文件。因此能够处理目标方已存在相同文件的情况。

1.3   该类定义了几种与用户界面通讯的消息，详细说明如下：
a) 开始传输消息WM_TRANS_BEGIN: 当传输文件或目录前会发送此消息到指定窗口(由TransmitTask函数中的第二个参数指口通知窗口），消息参数解释如下
wParam：   为指向TRANSMIT_MASK结构的指针
lParam:    为指向TRANSMIT_INFO结构的指针
当窗口收到此消息时，会得到传输任务的描述，传输任务信息。传输任务描述说明了要传输的源文件或目录名称（含路径名），目标接收方的IP和端口；

传输任务信息说明了源文件或目录的大小，正在进行的状态，这个状态由TRANSMIT_INFO结构成员dwError标识，对于该消息，可能值及意义如下：
  CFtp::errorCalcingFileSize  正在计算文件大小
  CFtp::errorCalcingDirSize   正在计算目录大小
  CFtp::errorConnectIng         正在连接对方
  CFtp::errorConnectOK        连接成功，请等待对方接受请求
  CFtp::errorConnectFail        连接失败
  CFtp::errorNo               对方已接受传输请求，正在传输中
因此，模块会发送5次该消息到窗口，计算大小为一次，其它每种状态一次。

b) 正在传输消息WM_TRANS_ING: 当文件或目录开始传输后，会发送此消息到指定窗口，当传输结束会一直发该消息到窗口，时间间隔是500ms。消息参数解释如下
  wParam：  为指向TRANSMIT_MASK结构的指针
  lParam:   为指向TRANSMIT_INFO结构的指针
 当窗口收到此消息时，会得到传输任务的描述，传输任务信息。传输任务描述说明了要传输的源文件或目录名称，目标接收方的IP和端口；
 传输任务信息说明了当前正在传输的源文件或目录名称（含路径名），已传输的文件或目录长度，当前正在传输文件的总长度和已传输的长度。对于此消息，传输状态标识dwError值总为CFtp::errorNo。

c) 传输结束消息 WM_TRANS_END: 当文件或目录传输正常完成或出现异常错误时，会发消息到指定窗口，该消息仅仅发送一次。消息参数解释如下
  wParam：  为指向TRANSMIT_MASK结构的指针
  lParam:   为指向TRANSMIT_INFO结构的指针
当窗口收到此消息时，会得到传输任务的描述，传输任务信息。传输任务描述说明了要传输的源文件或目录名称，目标接收方的IP和端口；
传输任务信息说明了当前正在传输的源文件或目录名称（含路径），已传输的文件或目录长度，当前正在传输文件的总长度和已传输的长度。对于此消息，传输状态标识dwError可能值及意义如下：
  CFtp::errorNo                 ---   传输成功
  CFtp::errorOpenFail           ---   打开文件失败
  CFtp::errorReadFail           ---   读文件失败
  CFtp::errorConnectFail        ---   连接失败
  CFtp::errorConnectBreak       ---   连接中断
  CFtp::errorWriteFail          ---   对方磁盘空间不够写文件失败
  CFtp::errorInvalidDestPath    ---   目标文件或目录路径无效
  CFtp::errorUserCancel         ---   用户取消传输
  CFtp::errorUserJump           ---   用户跳过文件
  CFtp::errorRefuseFileRequest  ---   对方拒绝传输文件请求
  CFtp::errorRefuseDirRequest   ---   对方拒绝传输目录请
 应用程序在处理此消息时，返回前应调用RemoveTransmitTask来删除此次传输任务。

d) 传输中断消息 WM_TRANS_BREAK: 当接收方已存在相同的文件或文件被使用时，会中断传输发该消息到指定窗口，等待用户操作，决定是否替换或跳过文件。消息参数解释如下
  wParam：  为指向发送方TRANS_FILE_MSG结构的指针,
  lParam:   为指向接收方TRANS_FILE_MSG结构的指针
当窗口收到此消息时，会得到引起中断的文件名称（含路径）,由wParam参数转换成TRANS_FILE_MSG结构，由其data_msg.buf成员得到；中断的原因由lParam参数转换成TRANS_FILE_MSG结构，由其ctrl_msg成员得到,其可能值及意义如下：
  CFtp::FileIsExist  --- 接收方已存在相同名称文件
  CFtp::FileIsUsed   --- 接收方相同名称文件被使用
应用程序在处理此消息时，返回值很重要，因为返回值影响了后续的传输操作。应该的返回可能值及意义如下：
  CFtp::CoverOneFile  --- 覆盖单个文件
  CFtp::CoveAllFile   --- 覆盖全部文件
  CFtp::JumpOneFile   --- 跳过单个文件
  CFtp::JumpAllFile   --- 跳过全部文件
  CFtp::CancelFile    --- 取消传输
当返回值不为以上值时，会导致终止传输。

e)接收传输请求消息 WM_TRANS_REQUEST: 当接收方收到传输请求时，会发该消息到指定窗口(由SetTransRequestNotifyHwnd函数设定的窗口)，消息参数解释如下
  wParam :     发送方IP地址(类型为unsigned long)
  lParam :     发送方端口(类型为WORD)
应用程序处理此消息时，应调用GetTransRequestInfo获得请求文件或目录名称（含路径）及长度信息。

f)传输接收出错消息 WM_RECV_ERROR: 当接收方接收出现错误时，会发该消息到指定窗口(由SetRecvErrorHwnd函数设定的窗口)，消息参数解释如下
  wParam :     发送方IP地址(类型为unsigned long)
  lParam :     发送方端口(类型为WORD)

如果需要用户UI，以上消息a)—b)为发送应用程序需要处理的，e)—f)为接收方应用程序需要处理的。由于保证唯一性，这些消息都是用RegisterWindowMessage注册的（），因此应用程序处理时需要使用ON_REGISTERED_MESSAGE宏来添加自定义消息映射。

1.4主要方法说明如下
1)开始传输任务
原型：DWORD TransmitTask(const TRANSMIT_TASK& TransmitTask, HWND hWnd)
参数：TransmitTask，传输任务描述
      hWnd，用户界面通知窗口，如果为NULL表示不需要UI控制，这时内部将采用默认的行为。
返回值：如果成功返回CFtp::errorNo，否则返回下列可能值之一
 CFtp::errorSrcEmpty     --- 源路径为空
 CFtp::errorInvalidHwnd  --- 通知窗口无效
 CFtp::errorSrcInvalid   --- 源文件或目录不存在
 CFtp::errorMemoryLack   --- 内存不足
 CFtp::errorTransIng	 --- 相同任务正在传输

2) 取消传输任务
原型: void  CancelTransmit(const TRANSMIT_TASK& TransmitTask)
参数: TransmitTask，传输任务描述
备注: 该方法取消指定的传输任务，退出传输线程

3) 删除传输任务
原型：void  RemoveTransmitTask(const TRANSMIT_TASK TransmitTask)
参数：TransmitTask，传输任务描述
备注：与方法2）不同，该方法仅是删除指定传输任务的相关数据结构，如果任务正在传输中，决不应该调用此方法，否则引起错误。当通知窗口为NULL或无效时，传输结束后会自动调用该方法，否则应在WM_TRANS_END消息处理返回前调用此方法。

4)接受传输请求
原型：void  AcceptTransRequest(const string& strIP, WORD wPort, LPCTSTR lpSavePath, bool bDir)
参数：strIP -- 发送方IP
      wPort -- 发送方端口
      lpSavePath --保存文件或目录的路径
      bDir -- 标志是文件还是目录，true表示目录，false表示文件

5)拒绝传输请求
原型：void  RefuseTransRequest(const string& strIP, WORD wPort, bool bDir)
参数：strIP --- 发送方IP
      wPort --- 发送方端口
      bDir --- 标志是文件还是目录，true表示目录，false表示文件

6)获取传输请求信息
原型: DWORD GetTransRequestInfo(const string& strIP, WORD wPort,CString& strName, ULONGLONG& ullTotalLen)
参数: strIP --- 发送方IP
      wPort --- 发送方端口
      strName --- 请求文件或目录名称(含路径)
      UllTotalLen --- 请求文件或目录的长度
返回值：传输请求类型，仅可能为两种值：CFtp::TransDirRequest 表示传输目录请求
 CFtp::TransFileRequest 表示传输文件请求
备注: 当应用程序收到WM_TRANS_REQUEST消息后，调用该方法获得传输请求信息。

7)删除客户传输请求信息
原型: void  RemoveClientRequestMsg(const string& strIP, WORD wPort)
参数：strIP --- 发送方IP
      wPort --- 发送方端口
备注: 当应用程序收到WM_TRANS_REQUEST消息，调用GetTransRequestInfo获得传输请求信息后，若不再需要该请求信息，应调用该方法删除请求信息

8)设置传输请求通知窗口
原型: void  SetTransRequestNotifyHwnd(HWND hWnd)
参数：hWnd --- 通知窗口句柄

9)设置接收错误通知窗口
原型: void  SetRecvErrorHwnd(HWND hWnd)
参数：hWnd --- 通知窗口句柄

以上方法中，1)--3) 用于发送方，4)--9）用于接收方。

(2) 如何使用CFtp类
因CFtp类继承于CTCPNet类，在开始使用前，如果没有初始化winsock库，需要调用netcomm::InitSock初始化winsock库；在程序退出前，如果没有释放winsock库，需要调用netcomm::CleanSock释放winsock库。
作为接收方应用程序，需要调用Start方法启动服务来侦听接受连接，调用Stop方法停止服务。这点和CTCPNet使用一样，具体可参考文档<<TCP网络通讯模块使用说明>>。

2.1． 发送方使用方法，由于传输是在另一线程内进行的，故需要定义一个全局性的CFtp对象，这个对象不能是局部性栈对象，可以是全局栈对象或堆对象。
1)传输文件或目录，示例如下
//传输文件到主机192.168.11.1
TRANSMIT_TASK  file_task(“F:\\myfile.doc”,”192.168.11.1”,8001);
//m_ftp假设是全局栈对象, file_task是全局栈对象 
 DWORD dwError = m_ftp.TransmitTask(file_task, hWnd1)；  
//对返回值作判断处理, 目前返回值只可能是下面5种之一
switch(dwError)
{
   case CFtp::errorSrcEmpty:	    break;   //源文件名称为空
   case CFtp::errorInvalidHwnd:    break;   //通知窗口无效
   case CFtp::errorSrcInvalid:	 break;   //源文件无效
   case CFtp::errorMemoryLack:    break;   //内存不足
   case CFtp::errorTransIng:        break;   //相同文件正在传输中
   case CFtp::errorNo:            break;   //操作成功
}
CString strDir = _T(“F:\\mydir”);    //或_T(“F:\\mydir\\”)
TRANSMIT_TASK  dir_task(,”192.168.11.1”,8001);
//假设dir_task是全局栈对象
dwError = m_ftp.TransmitTask(dir_task, hWnd2)；
switch(dwError)
{
   case CFtp::errorSrcEmpty:	    break;   //源文件名称为空
   case CFtp::errorInvalidHwnd:    break;   //通知窗口无效
   case CFtp::errorSrcInvalid:	 break;   //源文件无效
   case CFtp::errorMemoryLack:    break;   //内存不足
   case CFtp::errorTransIng:        break;   //相同文件正在传输中
   case CFtp::errorNo:            break;   //操作成功
}
要注意地是，这里的通知窗口句柄hWnd1和hWnd2如果是不为空有效的，则应该是属于不同的线程窗口，因为传输过程中文件替换窗口是模态的，即必须要用户参与的。

2) 取消文件或目录传输，示例如下
//取消文件传输
m_ftp.CancelTransmit(file_task);  
//取消目录传输
m_ftp.CancelTransmit(dir_task);  

3)删除传输任务，如果关联了通知窗口，在传输结束后则需要此操作。否则可不必调用此操作
//删除文件传输任务
m_ftp.RemoveTransmitTask(file_task);
//删除目录传输任务
m_ftp.RemoveTransmitTask(dir_task);

2.  接收方使用方法
   接收方需要设置通知窗口来处理对方的传输请求和接收错误情况，因此需要处理WM_TRANS_REQUEST和WM_RECV_ERROR两个消息，具体可见TestFtp测试工程代码。
1)设置传输请求和错误处理通知窗口
   //m_ftp假设为全局性栈对象
m_ftp.SetTransRequestNotifyHwnd(hWnd1);
m_ftp.SetRecvErrorHwnd(hWnd2);
      为确保正确工作，这两行代码应该在Start前调用。

2）得到传输请求信息，接受或拒绝传输请求
//得到传输请求信息
CString  strName;  ULONGLONG ullTotalLen;
DWORD dwRequestType = m_ftp.GetTransRequestInfo(m_strIP, m_wPort, strName, ullTotalLen);
//接受文件传输请求
m_ftp.AcceptTransRequest(m_strIP,m_wPort,m_strSavePath, false)
//接受目录传输请求
m_ftp.AcceptTransRequest(m_strIP,m_wPort,m_strSavePath, true);
假设m_strIP、m_wPort为发送方IP和端口, m_strSavePath为保存接收文件或目录的位置，
这步操作应在WM_TRANS_REQUEST消息处理中

3）删除客户传输请求信息
   m_ftp.RemoveClientRequestMsg(m_strIP, m_wPort);
当处理完传输请求后，调用此操作删除客户传输请求信息。

3.  本地传输使用方法
本地传输和发送方差不多, 只是TRANSMIT_TASK构造方法不一样, 只需使用带两个参数的构造函数TRANSMIT_TASK(const CString&, const CString& ),示例如下:
//拷贝文件至C盘
TRANSMIT_TASK  file_task(“F:\\myfile.doc”,”C:\”);
//m_ftp假设是全局栈对象, file_task是全局栈对象 
DWORD dwError = m_ftp.TransmitTask(file_task, hWnd1)；  
//对返回值作判断处理, 目前返回值只可能是下面5种之一
switch(dwError)
{
   case CFtp::errorSrcEmpty:	    break;   //源文件名称为空
   case CFtp::errorInvalidHwnd:    break;   //通知窗口无效
   case CFtp::errorSrcInvalid:	 break;   //源文件无效
   case CFtp::errorMemoryLack:    break;   //内存不足
   case CFtp::errorTransIng:        break;   //相同文件正在传输中
   case CFtp::errorNo:            break;   //操作成功
}

//拷贝目录至D:\MyDir下
CString strDir = _T(“F:\\mydir”);    //或_T(“F:\\mydir\\”)
TRANSMIT_TASK  dir_task(strDir,”D:\\MyDir”);
//假设dir_task是全局栈对象
dwError = m_ftp.TransmitTask(dir_task, hWnd2)；
switch(dwError)
{
   case CFtp::errorSrcEmpty:	    break;   //源文件名称为空
   case CFtp::errorInvalidHwnd:    break;   //通知窗口无效
   case CFtp::errorSrcInvalid:	 break;   //源文件无效
   case CFtp::errorMemoryLack:    break;   //内存不足
   case CFtp::errorTransIng:        break;   //相同文件正在传输中
   case CFtp::errorNo:            break;   //操作成功
}

综上所述，发送方如果关联了窗口，则应处理WM_TRANS_BEGIN，WM_TRANS_ING，WM_TRANS_END，WM_TRANS_BREAK 4个消息，对应具体的窗口界面可由开发者自己灵活设计。同理，接收方的传输请求和错误处理窗口设计也是灵活的。在使用中，错误代码参考附录B，控制命令参考附录C。


附录A--数据结构

1.传输任务结构体   
 struct CFtp::TRANSMIT_TASK
{
      CString    strSrc;     ///< 源文件或目录名称（含路径）
      CString    strDest;    ///< 目标文件或目录（含路径）
      string     strIP;      ///< 目标IP
      WORD       wPort;     ///< 目标端口
  /*
      @brief  默认构造函数
*/
      TRANSMIT_TASK(){};

  /*
      @brief   带参数的构造函数
      @param  _strSrc  源文件或目录名称（含路径）
      @param  _strIP   目标IP
      @param  _wPort  目标端口
*/
      TRANSMIT_TASK(const CString& _strSrc,const string& _strIP, WORD _wPort);

  /*
 @brief 拷贝构造函数
 @param other  传输任务对象
*/
       TRANSMIT_TASK(const TRANSMIT_TASK& other);	

   /*
       @brief  赋值运算函数
       @param other  传输任务对象
*/
       TRANSMIT_TASK& operator=(const TRANSMIT_TASK& other);

   /*
       @brief  排序比较函数, 因为该结构被作为C++标准库容器的元素
       @param other  传输任务对象
       @return  如果小于other则返回true，否则返回false
*/
	bool operator < (const TRANSMIT_TASK& other) const;
};
该结构用于WM_TRANS_BEGIN, WM_TRANS_ING,WM_TRANS_END 3个消息处理中， 要特别注意的是其四个成员外部不能被改变，在这3个消息处理中，当作只读看待。

2. 传输信息结构体
struct CFtp::TRANSMIT_INFO
{
public:
	friend  struct  TASK_INFO;
	TRANSMIT_INFO(TASK_INFO* _pTaskInfo);
	
	/*
	@brief  获得已传输的文件或目录长度，当前正在传输文件已传输的长度（字节数） 
	@param  _ullTransFileLen   正在传输文件已传输的长度
	@param  _ullTransDirLen    已传输文件或目录长度
	*/
	void  GetTransLen(ULONGLONG &_ullTransFileLen, ULONGLONG &_ullTransDirLen);
	
	/*
	@brief 获得当前传输的源文件名和目标文件名（含路径）
	@param strSrc  源文件名
	@param strDest 目标文件名   
	*/
	void  GetTransFile(CString& strSrc, CString& strDest);
	
	/*
	@brief 获得传输文件或目录的总长度(字节数)
	@return  返回文件或目录的总长度
	*/
	ULONGLONG GetTotalLen();
	
	/*
	@brief  获得传输速度（单位是每秒字节数）
	@return  返回速度值
	*/
	ULONGLONG GetTransSpeed();

	public:
	  DWORD    dwError;               ///< 传送状态

   private:	
	volatile ULONGLONG  ullTotalDirLen;   ///< 目录或文件总长度
	volatile ULONGLONG  ullTransDirLen;   ///< 目录或文件已传输长度
	volatile ULONGLONG  ullTotalFileLen;   ///< 当前文件总长度
	volatile ULONGLONG  ullTransFileLen;  ///< 当前文件已传输长度
	volatile ULONGLONG  ullTransSpeed;   ///< 传输速度
	CString             strCurSrcFile;    ///< 当前源文件
	CString             strCurDestFile;   ///< 当前目标文件

	TASK_INFO*  pTaskInfo;
};
该结构成员方法用于WM_TRANS_BEGIN, WM_TRANS_ING,WM_TRANS_END  3个消息处理中。


3.传输文件消息结构
struct  CFtp::TRANS_FILE_MSG
{
        CONTROL_MSG    ctrl_msg;           ///< 控制消息
	struct  DATA_MSG                    ///< 数据消息
	{
	   ULONGLONG ullLen;            ///< 文件长度
	   FILETIME  LastWriteTime;       ///< 文件最后修改时间，用于文件替换
	   BYTE      buf[SendBufLen];    ///<  数据正文内容
	 } data_msg; 
	TRANS_FILE_MSG() { memset(this, 0, sizeof(TRANS_FILE_MSG));}
};
该结构用于WM_TRANS_BREAK个消息处理中。


4.客户端信息结构
struct CFtp::CLIENT_MSG 
{
	string    strIP;       ///<  IP地址
	WORD   wPort;      ///<  端口
	
	/*
	@brief  带参数的构造函数
	@param _strIP  IP地址
	@param _wPort 端口
	*/
	CLIENT_MSG(const string& _strIP, WORD _wPort);

	/*
	@brief  比较运算符
	@param other  待比较的客户端结构
	@return  如果小于other则返回true, 否则返回false
	*/
	bool operator< (const CLIENT_MSG& other) const;
};
该结构可用于WM_TRANS_REQUEST， WM_RECV_ERROR消息处理中。


附录B—错误代码
class CFtp
{
     ……
///< 定义错误代码标志
	enum 
	{ 
	   errorNo        =  0L,     ///< 操作成功
	errorOpenFail     ,        ///< 打开文件失败
	   errorReadFail     ,        ///< 读文件失败
	   errorCalcingFileSize ,       ///< 正在计算文件大小
	   errorCalcingDirSize,        ///< 正在计算目录大小
	   errorConnectIng   ,       ///< 正在连接
	   errorConnectFail  ,        ///< 网络不通,连接失败
	   errorConnectOK    ,       ///< 连接成功
	errorConnectBreak ,         ///< 连接中断
	errorUserCancel   ,        ///< 用户取消传送
	   errorSrcEmpty   ,         ///< 源路径为空
	errorDestEmpty    ,        ///< 目标路径为空
	errorInvalidHwnd  ,        ///< 通知窗口无效
	   errorSrcInvalid   ,         ///< 源目录或文件不存在
	errorTransIng     ,        ///< 任务正在传输
	   errorMemoryLack   ,      ///< 内存不足
	   errorWriteFail    ,        ///< 磁盘空间不够写文件失败
	   errorInvalidDestPath,       ///< 目标文件路径无效
	   errorUserJump     ,      ///< 用过跳过文件
	   errorRefuseFileRequest,    ///< 对方拒绝接收文件
	   errorRefuseDirRequest,     ///< 对方拒绝接收目录
	   errorNum                ///< 错误代码数量，仅作排序用
	};

……
}


附录C—传输控制命令
class CFtp
{
     ……
///< 文件传输控制命令
	enum  CONTROL_MSG  
	{
	// 由客户方发送的命令
	RequestOneFile   =  errorNum + 1,  ///< 客户请求发送文件
	TransFileRequest,			    ///< 发送文件请求	
	TransDirRequest,                  ///< 发送目录请求
	CancelTransRequest,               ///< 取消发送请求
	SendFile      ,                   ///< 正在传送文件
	CoverOneFile  ,                  ///< 覆盖单个已存在文件
	CoverAllFile  ,                   ///< 覆盖全部已存在文件
	JumpOneFile   ,                 ///< 跳过单个已存在文件
	JumpAllFile   ,                  ///< 跳过全部存在文件
	CancelFile    ,                  ///< 取消发送
	
	//  由服务方返回的响应命令
	FileRequestBeRefuse,             ///< 对方拒绝接收文件
	DirRequestBeRefuse,             ///< 对方拒绝接收目录
	FileRequestBeAccept,            ///< 对方同意接收文件
	DirRequestBeAccept,			  ///< 对方同意接收目录	
	FileIsAccept  ,                  ///< 文件被接收
	FileIsExist   ,                  ///< 文件已存在
	FileIsUsed    ,                 ///< 文件被使用
	FileWriteFail ,                  ///< 文件写失败
	FileInvalidPath,                 ///< 文件路径无效,即创建文件所在目录失败 
	controlNum                   ///< 控制命令数量，仅作排序用
	};
……
}
